"Reusable collection methods." ⇒
{empty, element} ↦ {

  (f ∘ a) = "
    Element-wise application of the function `f`.  That is, a list of `f(element)` for each `element` in `a`.
  " ⇒ a.into { element = element ∘ f, empty }

    
  x.filtered(predicate) = (
    "Create a view of the list containing only elements that \"pass\" the filter.  That is,
     for any element `e`, `predicate(e) == true`."
    usage examples = [[1,2,3,4].filtered(.is odd) == [1,3]]
  ) ⇒ x.into {
    element(elt) = if(predicate(elt)) then (element(elt)) else (empty)
    empty = empty
  }
  
  x.none(predicate) = (
    "Return true if there is no element in the list for which `predicate(element) == true`"
    usage examples = [
      [1,-2,3,-4].none(.is positive) == false
      [1,-2,3,-4].none(.is negative) == false
      [1,3].none(.is negative) == true
      [-2,-4].none(.is positive) == true
    ]
  ) ⇒ ! x.any(predicate)

  x.any(predicate) = (
    "Return true if there is at least one element in the collection for which `predicate(element) == true`"
    
    usage examples = [
       [1,-2,3,4].any(.is positive) == true
       [1,2].any(.is negative) == false
       [].any(.is positive) == false
    ]    
  ) ⇒ x.into {
    element = predicate
    empty = false
  }
  
  
  x.all(predicate) = (
    "Return true if there are no element in the collection for which `predicate(element) == false`"

    usage examples = [
        [1,2,3,4].all(.is positive) == true
        [-1,-2,-3].all(.is negative) == true
        [1, -2, 3].all(.is positive) == false
    ]
  ) ⇒ !x.any(not ∘ predicate)

  (x ?: substitute) = (
    "Return `substitute` if `x` is empty.  Otherwise return some element of `x` as determined by the type of collection."
  ) ⇒ x.into({ element(e) = {(a + b) = a, value = e}, empty = {(a + b) = b, value = substitute} }).value

  x.first = x.into {
    element(e) = { (a + b) = a, value = element(e) }
    empty = { (a + b) = a, value = empty }
  }.value
  
  x.is empty = (
    "true iff this collection is empty, otherwise false"
    usage examples = [
      [].is empty == true
      [1].is empty == false
      [1,2,3].is empty == false
    ]
  ) ⇒ (x ; ↦ false) ?: true

  x.is nonempty = (
    "true iff the collection if not empty, otherwise false"
    usage examples = [
      [1].is nonempty == true
      [].is nonempty == false
    ]
  ) ⇒ (x ; ↦ true) ?: false

  (x && result) = if (x.is empty) then (result) else (x)
  
  (x || substitute) = if (x.is empty) then (substitute) else (x)

  c.sum(start) = (
    "
      Return the result of a `+` operation on all elements of the list and the `start` parameter (typically
      `0`, `[]`, or another appropriate identity for `+` is used as the `start` value)
      
      The list must be a finite list.
    "
    usage examples = [
      [1,2,3].sum(0) == 0 + 1 + 2 + 3 == 6
      [[1,2],[3,4],[5,6]].sum([]) == [] + [1,2] + [3,4] + [5,6] == [1,2,3,4,5,6]
    ]
  ) ⇒ c.into {
    empty = start
    element(elt) = elt
  }

  x.flattened = (
    "
    Assuming the collection contains only collections of the same kind as this one, 
    return a concatenation or chaining of all those collections.
    "
    usage examples = [
      [[1,2],[3,4],[5,6]].flattened == [1,2,3,4,5,6]
    ]
  ) ⇒ x.sum(empty)

  (|x|) = (
    "
      Assuming the collection is finite, calculate the length of the collection.

      For example: `[1,2,3].length == 3`
    "
    usage examples = [
      (|[1,2,3]|) == 3
      (|[]|) == 0
    ]
  ) ⇒ x.into {
    element(e) = 1
    empty = 0
  }
  
  x.size = |x|
  
  (x ∈ y) = (
    "Return true if `x == element` for any `element` in this collection."
    usage examples = [
       "apple" ∈ ["apple", "pear", "banana"]
       ¬("orange" ∈ ["apple", "pear", "banana"])
    ]
  ) ⇒ y.into {
    element(e) = (e == x)
    empty = false
  }
  
}