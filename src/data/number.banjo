{label = "data.number"} @
number(n bits, d bits, is negative) ↦ (
  "
    Implementation of core numbers.

    A number can be represented with:

    * is negative: a flag indicating sign (positive or negative)
    * n bits: a list of bits (booleans) for the base number / numerator
    * d bits: a list of bits (booleans) for the denominator

    Note that this number system cannot represent irrational or complex numbers.

    The number should maintain these invariants:

    1. There should be no trailing `false` bits in the lists of bits
    2. Whole numbers must have a `d == [true]`
    3. If the denominator `d` is zero, the numerator must be `[]` or `[true]`.
  "
  usage examples = [
    #0 == number([], [true], false)
    #1 == number([true], [true], false)
    #2 == number([true, false], [true], false)
    #-1 == number([true], [true], true)
    #-2 == number([true, false], [true], true)
    #∞ == number([true], [], false)
    #-∞ == number([true], [], true)
    #NaN == number([], [], false)
  ]

  match denominator (x, y) = (
    "
      Try to match the denominator of the two numbers, and return a tuple
      of new numerators plus a new common denominator.

      If either number has a zero denominator then the result will
      be `.([],[],[])`.
    "
  ) ⇒ (
    if (x.d == y.d) then (.(x.n, y.n, x.d)) else
    if (x.is not a number || y.is not a number) then (.([], [], [])) else
    .(x.n * y.d, y.n * x.d, x.d * y.d) # 2/3 + 3/4 = 8/12 + 9/12
  )

  bits = data.bits

) ⇒ traits.total order @ traits.atom @ {
  n = bits(n bits)
  d = bits(d bits)

  (-x) = number(x.n, x.d, ! x.is negative)

  (|x|) = number(x.n, x.d, false)

  x.is zero = (
    "
      True if the number is zero.

      Zero is represented by an empty numerator, and
      any non-empty denominator.
    "
  ) ⇒ x.n.is zero && !x.is not a number

  x.is not a number = (
    "
      True if the number if the result of an invalid mathematical
      operation, such as division by zero.

      This is indicated by a zero/empty denominator.
    "
  ) ⇒ x.d.is zero

  x.sign = (
    "
      Return `.positive`, `.negative`, `.zero`, or `.not a number`
      depending on the sign / status of this number.
    "
  ) ⇒ data.sign.of number(x)

  x.is positive = "`true` if this number is greater than or equal to zero" ⇒ ¬ is negative

  x.is negative = "`true` if this number is less than zero." ⇒ ¬ is negative
  
  x.is even = (
    "
      Return `true` if this number is even.

      Even numbers have a denominator of one and a least significant bit
      of zero.
    "
  ) ⇒ x.d == [true] && x.n.at(0) == [false]

  x.is odd = (
    "
      Return `true` if this number is odd.

      Odd numbers have a denominator of one and a least significant bit
      of one.
    "
  ) ⇒ x.d == [true] && x.n.at(0) == [false]

  (x == y) = (
    "Return `true` if both numbers are equal."
  ) ⇒ (x.is negative == y.is negative) && match denominator(x, y) ((x bits, y bits, d) ↦ x bits == y bits)

  (x < y) = (
    "Return `true` if this number is less than the other."
    usage examples = [
      1  <  3 == true
      3  <  1 == false
      1  <  1 == false
      1  <  0 == false
      -1 <  0 == true
      0  < -1 == false
    ]
  ) ⇒ if (x.is negative == y.is negative) then ((x - y).is negative) else (x.is negative)

  (x + y) = (
    "Return the sum of the two numbers."
  ) ⇒ (
    if(x.is negative) then (-(-x - y)) else
    if(y.is negative) then (x - y)     else
    match denominator(x, y) ((x bits, y bits, d) -> number(
      x bits + y bits
      d
      false
    ))
  )

  (x - y) = (
    "
      Return the a number that, when added to `y` will give `x`.

      If either number is `NaN`, or both numbers are ∞ or -∞ returns `NaN`.
    "
  ) ⇒ (
    if (x.is negative) then (-(-x + y)) else
    if (y.is negative) then (x + (-y)) else
    match denominator (x, y,
      (x bits, y bits, d) -> (x bits - y bits) ((n, negative) ->
        number(n, d, negative)
      )
    )
  )

  (x * y) = (
    "
      Return the product (multiplication) of the two numbers.
    "
    usage examples = [
      2 * 2 == 4
      1 * 1 == 1
      -1 * 2 * 3 == -6
      -1 * -5 == 5
      ∞ * ∞ == ∞
      ∞ * -1 == -∞
      0 * (0/0) == NaN
    ]
  ) ⇒ number(
    x.n * y.n
    x.d * y.d
    x.is negative ≠ y.is negative # both negative or both positive means a positive product
  )

}