number(n bits, d bits, negative) ↦ traits.total order @ (
  doc = "
    Implementation of core numbers.

    A number can be represented with:

    * negative: a flag indicating sign (positive or negative)
    * n: a list of bits (booleans) for the base number / numerator
    * d: a list of bits (booleans) for the denominator

    Note that this number system cannot represent irrational or complex numbers.

    The number should maintain these invariants:

    1. There should be no trailing `false` bits in the lists of bits
    2. Whole numbers must have a `d == [true]`
    3. If the denominator `d` is zero, the numerator must be `[]` or `[true]`.
  "
  usage examples = [
    0 == number([], [true], false)
    1 == number([true], [true], false)
    2 == number([true, false], [true], false)
    -1 == number([true], [true], true)
    -2 == number([true, false], [true], true)
    ∞ == number([true], [], false)
    -∞ == number([true], [], true)
    NaN == number([], [], false)
  ]

  match denominator (x, y) = (
    doc = "
      Try to match the denominator of the two numbers, and return a tuple
      of new numerators plus a new common denominator.

      If either number has a zero denominator then the result will
      be `.([],[],[])`.
    "
  ) ⇒ x.d == y.d {
    true = .(x.n, y.n, x.denominator)
    false = (x.not a number || y.not a number) {
      true = .([], [], [])
      false = TODO
    }
  }

  n = bits(n bits)
  d = bits(d bits)
) ⇒ {
  (-x) = x @ { negative = ! x.negative }

  (|x|) = x @ { negative = false }

  x.zero = (
    doc = "
      True if the number is zero.

      Zero is represented by all zero bits in the numerator, and
      any non-empty denominator.
    "
  ) ⇒ bits are all zero(x.n) && !x.not a number

  x.not a number = (
    doc = "
      True if the number if the result of an invalid mathematical
      operation, such as division by zero.

      This is indicated by a zero/empty denominator.
    "
  ) ⇒ bits are all zero(x.d)

  x.sign = (
    doc = "
      Return `.positive`, `.negative`, `.zero`, or `.not a number`
      depending on the sign / status of this number.
    "
  ) ⇒ [.zero, .not a number, .negative].filter(p -> p(x)) ?: .positive

  x.positive = (
    doc = "
      Return `true` if this number is positive.
    "
  ) ⇒ !x.negative

  x.even = (
    doc = "
      Return `true` if this number is even.

      Even numbers have a denominator of one and a least significant bit
      of zero.
    "
  ) ⇒ x.d == [true] && x.n.at(0) == [false]

  x.odd = (
    doc = "
      Return `true` if this number is odd.

      Odd numbers have a denominator of one and a least significant bit
      of one.
    "
  ) ⇒ x.d == [true] && x.n.at(0) == [false]

  (x == y) = (
    doc = "Return `true` if both numbers are equal."
  ) ⇒ (
    (x.negative == y.negative) && (x - y) == 0
  )

  (x < y) = (
    doc = "Return `true` if this number is less than the other."
    usage examples = [
      1 <  3 == true
      3 <  1 == false
      1 <  1 == false
      1 <  0 == false
     -1 <  0 == true
      0 < -1 == false
    ]
  ) ⇒ (x.negative == y.negative) {
    false = x.negative ; If they're not both negative, the negative one must be less
    true = (x - y).negative
  }



  (x + y) = (
    doc = "Return the sum of the two numbers."
  ) ⇒ x.negative {
    true = -(-x - y)
    false = y.negative {
      true = x - y
      false = match denominator(x, y) ((x bits, y bits, d) -> number(
        bit sum(x bits, y bits)
        d
        false
      ))
    }
  }

  (x - y) = (
    doc = "
      Return the a number that, when added to `y` will give `x`.

      If either number is `NaN`, or both numbers are ∞ or -∞ returns `NaN`.
    "
  ) ⇒ x.negative {
    true = -(-x + y)
    false = y.negative {
      true = x + (-y)
      false = match denominator (x, y,
        (x bits, y bits, d) -> bits minus bits(x bits, y bits) ((n, negative) ->
          number(n, d, negative)
        )
      )
    }
  }

  (x * y) = (
    doc = "
      Return the product (multiplication) of the two numbers.
    "
    usage examples = [
      2 * 2 == 4
      1 * 1 == 1
      -1 * 2 * 3 == -6
      -1 * -5 == 5
      ∞ * ∞ == ∞
      ∞ * -1 == -∞
      0 * (0/0) == NaN
    ]
  ) ⇒ number(
    x.n * y.n
    x.d * y.d
    x.negative ≠ y.negative ; both negative or both positive means a positive product
  )


}