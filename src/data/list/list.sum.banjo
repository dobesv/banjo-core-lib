"Concatenation of two non-empty lists." ⇒
(left, right) ↦ list.trait @ {
  if(x) = x.sum(left, right)
  into(algebra) = left.into(algebra) + right.into(algebra) 
  
  a.slice(start, end) = (
    a.from(start).to(end - start)
  )
  
  a.from(offset) = (
    if(offset <= 0) then (a) else
    left.from(offset) + right.from(offset - |left|)
  )
  
  a.to(limit) = (
    if(limit <= 0) then [] else
    left.to(limit) + right.to(limit - |left|)
  )
  
  a.at(n) = (
    left.at(n) + right.at(n - |left|)
  )
  
  a.first = left.first
  
  a.last = right.last
  
  a.zipped with(other list) =
    left.zipped with(other list) + right.zipped with(other list.from(|left|))
  
  a.starts with(prefix) =
    left.starts with(prefix.to(|left|)) && right.starts with(prefix.from(|left|))
  
  (a && result) = result
  
  (a || substitute) = a
  
  (a ?: substitute) = left ?: substitute
  
  (elt ∈ a) = (elt ∈ left) || (elt ∈ right)
  
  a.is empty = false
  a.is nonempty = true
  
  (|a|) = |left| + |right|
  
  (a == other list) = 
    (left == other list.to(|left|)) && (right == other list.from(|left|))
  
  (a != other list) = !(a == other list)
  
  (a < other list) = 
    (left < other list.to(|left|)) || 
      (left == other list.to(|left|) && right < other list.from(|left|))
  
  (a ≤ other list) =
    (left < other list.to(|left|)) ||
      (left == other list.to(|left|) && right ≤ other list.from(|left|)) 
      
      
}